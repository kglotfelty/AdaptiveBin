#!/usr/bin/env python
#
# Copyright (C) 2019 Smithsonian Astrophysical Observatory
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

from __future__ import print_function
import os
import sys



toolname = "map2reg"
__revision__ = "17 January 2019"


import ciao_contrib.logger_wrapper as lw
lgr = lw.initialize_logger(toolname)
verb0 = lgr.verbose0
verb1 = lgr.verbose1
verb2 = lgr.verbose2
verb3 = lgr.verbose3
verb5 = lgr.verbose5

img = None

def get_region( n_at ):
    """
    Apply threshold at the map value (n_at)
    
    Find location of max pixel (will be some arbitrary pixel in map)
    
    Convert from physical to logical coords
    
    Lasso to create region  -- this only works for contigious regions
    
    """

    verb1(n_at)
    thrsh = img.thresh( n_at, n_at )
    stt = thrsh.stats()
    if stt["sum"] == 0:
        return None
    pos = stt["max_loc"]
    logc = thrsh.physical( *pos )
    reg = thrsh.lasso( logc["logicalx"], logc["logicaly"], 
      low_value=0.1, high_value=n_at+0.5, value="absolute", coord="logical" )
    return str(reg)


@lw.handle_ciao_errors( toolname, __revision__)
def main():
    """
    
    """
    # get parameters
    from ciao_contrib.param_soaker import get_params
    from ciao_contrib.runtool import add_tool_history

    # Load parameters
    pars = get_params(toolname, "rw", sys.argv, 
        verbose={"set":lw.set_verbosity, "cmd":verb1} )

    from ciao_contrib._tools.fileio import outfile_clobber_checks
    outfile_clobber_checks( pars["clobber"], pars["outfile"])

    from ciao_contrib.cipt import CIAOImage
    global img
    img = CIAOImage(pars["infile"])
    nmax = int(img.stats()["max"])

    import numpy as np
    uu = np.unique( img.get_image().values)
    uu = uu[uu>0]

    from sherpa.utils import parallel_map
    outreg = parallel_map( get_region, uu )
    
    #outreg = [get_region(i) for i in uu]


    i=0
    while True:
        if outreg[i] is not None:
            break
        i=i+1
            
    from region import CXCRegion
    allout = CXCRegion(outreg[i])
    for r in outreg[i+1:]:
        if r is not None:
            allout = allout+CXCRegion(r)

    allout.write( pars["outfile"], fits=True, clobber=True )


   
if __name__ == "__main__":
    try:
        main()
    except Exception as E:
        print("\n# "+toolname+" ("+__revision__+"): ERROR "+str(E)+"\n", file=sys.stderr)
        sys.exit(1)
    sys.exit(0)





