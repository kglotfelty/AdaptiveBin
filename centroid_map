#!/usr/bin/env python
#
# Copyright (C) 2014 Smithsonian Astrophysical Observatory
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

from __future__ import print_function

toolname = "centroid_map"
__revision__ = "18 January 2019"

import sys
import os

import numpy as np


import ciao_contrib.logger_wrapper as lw
lgr = lw.initialize_logger(toolname)
verb0 = lgr.verbose0
verb1 = lgr.verbose1
verb2 = lgr.verbose2
verb3 = lgr.verbose3
verb5 = lgr.verbose5



@lw.handle_ciao_errors( toolname, __revision__)
def main():
        
    # get parameters
    from ciao_contrib.param_soaker import get_params

    # Load parameters
    pars = get_params(toolname, "rw", sys.argv, 
        verbose={"set":lw.set_verbosity, "cmd":verb1} )


    infile = pars["infile"]  # "img.psf_asm" 
    mapfile = pars["maskfile"] # "watershed.map"
    outfile = pars["outfile"] # "newcentroid.sites"

    from ciao_contrib._tools.fileio import outfile_clobber_checks
    outfile_clobber_checks(pars["clobber"], outfile )

    from pycrates import read_file
    imgvals = read_file(infile).get_image().values

    mapvals = read_file(mapfile).get_image().values

    assert mapvals.shape == imgvals.shape, "Image sizes must match"

    xlen = mapvals.shape[1]
    ylen = mapvals.shape[0]

    # Make matrix w/ constant Y values
    xx = list(np.arange(xlen))*ylen
    xx = np.array(xx)
    xx = xx.reshape(mapvals.shape)

    # Make matrix w/ constant X values
    yy = list(np.arange(ylen))*xlen
    yy = np.array(yy)
    yy = yy.reshape(mapvals.shape[::-1]).T

    # Weight imagevals by X and Y
    wx = xx * imgvals
    wy = yy * imgvals

    # Operate over map values
    
    unq = np.unique(mapvals)
    outvals = np.zeros_like(mapvals)
    for uu in unq:
        if 0 == uu:
            continue
        idx = np.where(mapvals==uu)
        w = np.sum(imgvals[idx])
        if 0 == w:
            # If sum is 0, use unweighted value
            cx = np.average(xx[idx])
            cy = np.average(yy[idx])
        else:
            cx = np.sum(wx[idx])/w
            cy = np.sum(wy[idx])/w
        outvals[int(cy)][int(cx)] = uu
        
    from crates_contrib.utils import make_image_crate
    outmap = make_image_crate(outvals)
    outmap.write(outfile, clobber=True)

    from ciao_contrib.runtool import add_tool_history
    add_tool_history( outfile, toolname, pars, toolversion=__revision__)


if __name__ == "__main__":
    try:
        main()
    except Exception as E:
        print("\n# "+toolname+" ("+__revision__+"): ERROR "+str(E)+"\n", file=sys.stderr)
        sys.exit(1)
    sys.exit(0)

