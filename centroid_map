#!/usr/bin/env python
#
# Copyright (C) 2019-2020 Smithsonian Astrophysical Observatory
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

from __future__ import print_function

toolname = "centroid_map"
__revision__ = "25 February 2020"

import sys
import os

import numpy as np


import ciao_contrib.logger_wrapper as lw
lgr = lw.initialize_logger(toolname)
verb0 = lgr.verbose0
verb1 = lgr.verbose1
verb2 = lgr.verbose2
verb3 = lgr.verbose3
verb5 = lgr.verbose5

from pycrates import read_file


class CIAOTemporaryFile():
    """
    A little class to make sure that tmpfiles are forcefully removed at end.
    """

    def __init__( self, *args, **kwargs ):
        from tempfile import NamedTemporaryFile    
        self.tmpfile = NamedTemporaryFile( dir=os.environ["ASCDS_WORK_PATH"], delete=False, *args, **kwargs)
        self.name = self.tmpfile.name

    def __del__(self):
        self.tmpfile.close()
        if os.path.exists( self.name ):
            os.remove( self.name )


class InputImage():
    
    def __init__(self, infile ):
        self.input_image = read_file(infile)
        self.imgvals = self.input_image.get_image().values

        self.xlen = self.imgvals.shape[1]
        self.ylen = self.imgvals.shape[0]

        # Make matrix w/ constant Y values
        xx = list(np.arange(self.xlen))*self.ylen
        xx = np.array(xx)
        self.xx = xx.reshape(self.imgvals.shape)

        # Make matrix w/ constant X values
        yy = list(np.arange(self.ylen))*self.xlen
        yy = np.array(yy)
        self.yy = yy.reshape(self.imgvals.shape[::-1]).T

        # Weight imagevals by X and Y
        self.wx = self.xx * self.imgvals
        self.wy = self.yy * self.imgvals

    def write_new_sites( self, outvals, outfile ):
        
        self.input_image.name = "centroid_map"
        self.input_image.get_image().values = outvals
        self.input_image.write(outfile, clobber="yes")


def centroid_map( mapfile, img, outfile ):
    mapvals = read_file(mapfile).get_image().values
    outvals = np.zeros_like(mapvals)
    assert mapvals.shape == img.imgvals.shape, "Image sizes must match"

    # Operate over map values    
    unq = np.unique(mapvals)

    for uu in unq:
        if 0 == uu:
            continue
        idx = np.where(mapvals==uu)
        w = np.sum(img.imgvals[idx])
        if 0 == w:
            # If sum is 0, use unweighted value
            cx = np.average(img.xx[idx])
            cy = np.average(img.yy[idx])
        else:
            cx = np.sum(img.wx[idx])/w
            cy = np.sum(img.wy[idx])/w
        outvals[int(cy)][int(cx)] = uu
        
    img.write_new_sites( outvals, outfile )
    

def make_tool_vtbin():
    import ciao_contrib.runtool as rt
    newtool = {
        'istool' : True,
        'req' : [
                rt.ParValue("infile", "f", "input image", None),
                rt.ParValue("outfile", "f", "output filename", None),
                ],
        'opt' : [                
                rt.ParValue("binimg","f", "output bin image name", None),
                rt.ParValue("shape","s", "shape for local max", "box"),
                rt.ParValue("radius","r", "radius of local max", 2.5),
                rt.ParValue("sitefile","f", "Input site file", None),
                rt.ParValue("clobber","b","Overwrite if file exists",False),
                rt.ParRange("verbose","i","Debug level",0,0,5)
                ]}
    gfm = rt.CIAOToolParFile( "vtbin", newtool["req"], newtool["opt"])
    return(gfm)

    

@lw.handle_ciao_errors( toolname, __revision__)
def main():
        
    # get parameters
    from ciao_contrib.param_soaker import get_params

    # Load parameters
    pars = get_params(toolname, "rw", sys.argv, 
        verbose={"set":lw.set_verbosity, "cmd":verb1} )


    infile = pars["infile"]  
    outfile = pars["outfile"]
    sitefile = pars["sitefile"]
    if 0 == len(sitefile) or "none" == sitefile.lower():
        sitefile=None
    numiter = int(pars["numiter"])

    from ciao_contrib._tools.fileio import outfile_clobber_checks
    outfile_clobber_checks(pars["clobber"], outfile )

    
    img = InputImage(infile)

    vtbin = make_tool_vtbin()    
    mapfile = CIAOTemporaryFile()
    vtbin( infile=infile, outfile=mapfile.name, site=sitefile, clobber=True)

    oldvals = read_file(mapfile.name).get_image().values.copy()


    for niter in range(numiter):
        sitefile = CIAOTemporaryFile()
        centroid_map( mapfile.name, img, sitefile.name )

        mapfile = CIAOTemporaryFile()
        vtbin( infile=infile, outfile=mapfile.name, site=sitefile.name, clobber=True)

        newvals = read_file(mapfile.name).get_image().values.copy()
        diff = np.argwhere( np.equal( oldvals, newvals) == False )
        oldvals = newvals
        verb2("Number of pixels different: {}".format(len(diff)))
        if 0 == len(diff):
            verb0("Converged at step {}. Done.".format(niter))
            break


    from ciao_contrib.runtool import dmcopy
    dmcopy( mapfile.name+"[1][centroid_map]", outfile, clobber=True)

    from ciao_contrib.runtool import add_tool_history
    add_tool_history( outfile, toolname, pars, toolversion=__revision__)


if __name__ == "__main__":
    try:
        main()
    except Exception as E:
        print("\n# "+toolname+" ("+__revision__+"): ERROR "+str(E)+"\n", file=sys.stderr)
        sys.exit(1)
    sys.exit(0)

