#!/usr/bin/env python
#
# Copyright (C) 2014 Smithsonian Astrophysical Observatory
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

from __future__ import print_function

toolname = "centroid_map"
__revision__ = "31 July 2017"

import sys
import os

from ciao_contrib.runtool import make_tool
from sherpa.utils import parallel_map 
import numpy as np
from crates_contrib.masked_image_crate import MaskedIMAGECrate


import ciao_contrib.logger_wrapper as lw
lgr = lw.initialize_logger(toolname)
verb0 = lgr.verbose0
verb1 = lgr.verbose1
verb2 = lgr.verbose2
verb3 = lgr.verbose3
verb5 = lgr.verbose5


def CIAOTemporaryFile( *args, **kwargs ):    
    """
    Force to use ASCDS_WORK_PATH
    """
    from tempfile import NamedTemporaryFile    
    return NamedTemporaryFile(dir=os.environ["ASCDS_WORK_PATH"], *args, **kwargs)



@lw.handle_ciao_errors( toolname, __revision__)
def main():
        

    def get_centroid( my_id ):    
        dmimgthresh = make_tool("dmimgthresh")
        dmstat = make_tool("dmstat")
        
        tmp1 = "tmp.thresh.{0}".format(my_id)

        dmstat.punlearn()
        dmimgthresh( infile, outfile=tmp1, expfile=mapfile, cut="{0}:{0}".format(my_id), value=0, clobber=True)
        dmstat( tmp1, centroid=True, sigma=False, median=False)
        os.unlink( tmp1)
        try:
            retval = [int(float(x)+0.5) for x in dmstat.out_cntrd_log.split(",")]
        except:
            print("Crashed with id={}".format(my_id))
            print(dmstat)
            raise

        verb1("id={}\tcentroid={}".format(my_id, str(retval)))
        return (my_id, retval)

    # get parameters
    from ciao_contrib.param_soaker import get_params

    # Load parameters
    pars = get_params(toolname, "rw", sys.argv, 
        verbose={"set":lw.set_verbosity, "cmd":verb1} )


    infile = pars["infile"]  # "img.psf_asm" 
    mapfile = pars["maskfile"] # "watershed.map"
    outfile = pars["outfile"] # "newcentroid.sites"

    from ciao_contrib._tools.fileio import outfile_clobber_checks
    outfile_clobber_checks(pars["clobber"], outfile )

    map_cr = MaskedIMAGECrate(mapfile) 
    img = map_cr.get_image().values
    ids = [x for x in set(list(img.flatten())) if x > 0] # mapid=0 are ungrouped

    new_centroids = parallel_map( get_centroid, ids )

    output = np.zeros_like( img )
    for oo in new_centroids:
        val = oo[0]
        pos_x = oo[1][0]-1
        pos_y = oo[1][1]-1
        output[pos_y][pos_x] = val


    from ciao_contrib.runtool import add_tool_history
    map_cr.get_image().values = output
    map_cr.write( outfile, clobber=True )
    add_tool_history( outfile, toolname, pars, toolversion=__revision__)


if __name__ == "__main__":
    try:
        main()
    except Exception as E:
        print("\n# "+toolname+" ("+__revision__+"): ERROR "+str(E)+"\n", file=sys.stderr)
        sys.exit(1)
    sys.exit(0)

