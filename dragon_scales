#!/usr/bin/env python
#
# Copyright (C) 2014 Smithsonian Astrophysical Observatory
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#


toolname = "dragon_scales"
__revision__ = "14 Apr 2015"

import os
import sys
import numpy as np

import ciao_contrib.logger_wrapper as lw
lgr = lw.initialize_logger(toolname)
verb0 = lgr.verbose0
verb1 = lgr.verbose1
verb2 = lgr.verbose2
verb3 = lgr.verbose3
verb5 = lgr.verbose5

from cxcdm import *


# TODO: add some logic to get image DSS and only work with 
# pixels inside the region.  Can post-filter with dmimgthresh,
# but since this is slow, should skip here rather than filter later

class DragonScales():
    
    def __init__(self, infile, psffile):
        """
        """
        from pycrates import read_file
        self.img = read_file(infile)
        self.vals = self.img.get_image().values
        self.infile = infile

        try:
            self.pmap = np.zeros_like( self.vals ) + float( psffile )
        except Exception, e:
            print e
            self.pmap = read_file( psffile).get_image().values

        self.nullval = -999
        self.mask = None


    def get_psfsize( self, xx, yy):
        """
        """
        return self.pmap[yy,xx]

        
    def set_mask( self, xx, yy, maskval ):
        """
        """
        from math import hypot

        rad = int(self.get_psfsize( xx, yy )+0.5)

        for _y in xrange( yy-rad-1, yy+rad+1, 1):
            if _y < 0 or _y >= self.mask.shape[0]:
                continue
            dy = yy-_y
            for _x in xrange( xx-rad-1, xx+rad+1, 1):
                if _x < 0 or _x >= self.mask.shape[1]:
                    continue
                if self.mask[_y,_x] != 0:
                    continue            
                dx = xx-_x
                if hypot( dx, dy) <= rad:
                    self.mask[_y, _x] = maskval
                    self.vals[_y, _x] = self.nullval


    def get_loc_max(self):
        """
        """
        ll = np.where( self.vals == np.max( self.vals ) )
        ly = ll [0][0]
        lx = ll[1][0]
        
        self.vals[ly,lx] = self.nullval
        return (ly,lx)


    def doit(self):
        """
        """
        self.mask = np.zeros_like(self.vals)

        maskval = 0
        while 0 == np.min(self.mask):
            maskval = maskval + 1
            print maskval
            ly,lx = self.get_loc_max()
            self.set_mask( lx, ly, maskval )

            
    def save( self, outfile ):
        """
        """
        if os.path.exists( outfile ):
            os.remove( outfile)  # clobber check already done

        dm_img = dmImageOpen(self.infile+"[opt type=i4]")
        out_img = dmBlockCreateCopy( dmDatasetCreate(outfile), "GRID", dm_img)
        out_dd = dmImageGetDataDescriptor( out_img )
        dmImageSetData( out_dd, self.mask )
        dmImageClose( out_img )
        dmImageClose( dm_img)


                
   
@lw.handle_ciao_errors( toolname, __revision__) 
def main():
    """
    
    """

    from ciao_contrib.param_soaker import get_params
    from ciao_contrib.runtool import dmmaskbin
    # Load parameters
    pars = get_params(toolname, "rw", sys.argv, 
        verbose={"set":lw.set_verbosity, "cmd":verb1} )

    from ciao_contrib._tools.fileio import outfile_clobber_checks
    outfile_clobber_checks(pars["clobber"], pars["outfile"] )
    outfile_clobber_checks(pars["clobber"], pars["binimg"] )

    dragon = DragonScales( pars["infile"], pars["psffile"] )
    dragon.doit()
    dragon.save( pars["outfile"] )
    
    if len(pars["binimg"])>0 and "none" != pars["binimg"]:
        dmmaskbin( pars["infile"], pars["outfile"]+"[opt type=i4]", pars["binimg"], clobber=True)

    


if __name__ == "__main__":
    try:
        main()
    except Exception, E:
        print >> sys.stderr, "\n# "+toolname+" ("+__revision__+"): ERROR "+str(E)+"\n"
        sys.exit(1)
    sys.exit(0)



